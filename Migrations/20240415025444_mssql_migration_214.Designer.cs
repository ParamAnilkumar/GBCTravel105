// <auto-generated />
using System;
using GBCTravel105.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GBCTravel105.Migrations
{
    [DbContext(typeof(GBCTravel105Context))]
    [Migration("20240415025444_mssql_migration_214")]
    partial class mssql_migration_214
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GBCTravel105.Areas.BookingManagement.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<string>("bookingtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDate = new DateOnly(2024, 4, 14),
                            bookingtype = "Car",
                            price = 20.0
                        });
                });

            modelBuilder.Entity("GBCTravel105.Areas.BookingManagement.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            Color = "White",
                            DailyRate = 50m,
                            IsAvailable = true,
                            Model = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Honda",
                            Color = "Black",
                            DailyRate = 60m,
                            IsAvailable = true,
                            Model = "Civic"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Ford",
                            Color = "Blue",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Focus"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Chevrolet",
                            Color = "Silver",
                            DailyRate = 45m,
                            IsAvailable = true,
                            Model = "Malibu"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Nissan",
                            Color = "Red",
                            DailyRate = 48m,
                            IsAvailable = true,
                            Model = "Altima"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "BMW",
                            Color = "Gray",
                            DailyRate = 70m,
                            IsAvailable = true,
                            Model = "3 Series"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Mercedes-Benz",
                            Color = "Black",
                            DailyRate = 80m,
                            IsAvailable = false,
                            Model = "C-Class"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Audi",
                            Color = "White",
                            DailyRate = 75m,
                            IsAvailable = true,
                            Model = "A4"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Volkswagen",
                            Color = "Blue",
                            DailyRate = 52m,
                            IsAvailable = true,
                            Model = "Jetta"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Hyundai",
                            Color = "Silver",
                            DailyRate = 47m,
                            IsAvailable = true,
                            Model = "Elantra"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Kia",
                            Color = "White",
                            DailyRate = 53m,
                            IsAvailable = true,
                            Model = "Optima"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Subaru",
                            Color = "Blue",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Impreza"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Mazda",
                            Color = "Red",
                            DailyRate = 49m,
                            IsAvailable = true,
                            Model = "Mazda3"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Lexus",
                            Color = "Black",
                            DailyRate = 85m,
                            IsAvailable = true,
                            Model = "IS"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Infiniti",
                            Color = "Gray",
                            DailyRate = 78m,
                            IsAvailable = true,
                            Model = "Q50"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Tesla",
                            Color = "White",
                            DailyRate = 90m,
                            IsAvailable = true,
                            Model = "Model 3"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Porsche",
                            Color = "Red",
                            DailyRate = 150m,
                            IsAvailable = true,
                            Model = "911"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Jaguar",
                            Color = "Blue",
                            DailyRate = 120m,
                            IsAvailable = true,
                            Model = "XE"
                        },
                        new
                        {
                            Id = 19,
                            Brand = "Land Rover",
                            Color = "Green",
                            DailyRate = 110m,
                            IsAvailable = true,
                            Model = "Discovery"
                        },
                        new
                        {
                            Id = 20,
                            Brand = "Volvo",
                            Color = "Silver",
                            DailyRate = 65m,
                            IsAvailable = true,
                            Model = "S60"
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Jeep",
                            Color = "Yellow",
                            DailyRate = 80m,
                            IsAvailable = true,
                            Model = "Wrangler"
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Toyota",
                            Color = "Black",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Camry"
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Ford",
                            Color = "White",
                            DailyRate = 58m,
                            IsAvailable = true,
                            Model = "Fusion"
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Honda",
                            Color = "Silver",
                            DailyRate = 63m,
                            IsAvailable = true,
                            Model = "Accord"
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Chevrolet",
                            Color = "Black",
                            DailyRate = 70m,
                            IsAvailable = true,
                            Model = "Impala"
                        });
                });

            modelBuilder.Entity("GBCTravel105.Areas.BookingManagement.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Flight");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Airline = "AIR CANADA",
                            ArrivalTime = new DateTime(2024, 4, 16, 4, 54, 43, 607, DateTimeKind.Local).AddTicks(9324),
                            DepartureTime = new DateTime(2024, 4, 14, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9318),
                            Destination = "YYZ",
                            Origin = "BOM",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 6,
                            Airline = "AIR CANADA",
                            ArrivalTime = new DateTime(2024, 4, 16, 4, 54, 43, 607, DateTimeKind.Local).AddTicks(9335),
                            DepartureTime = new DateTime(2024, 4, 14, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9333),
                            Destination = "YYZ",
                            Origin = "BOM",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 2,
                            Airline = "Emirates",
                            ArrivalTime = new DateTime(2024, 4, 16, 12, 54, 43, 607, DateTimeKind.Local).AddTicks(9341),
                            DepartureTime = new DateTime(2024, 4, 15, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9338),
                            Destination = "JFK",
                            Origin = "DXB",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 3,
                            Airline = "British Airways",
                            ArrivalTime = new DateTime(2024, 4, 17, 8, 54, 43, 607, DateTimeKind.Local).AddTicks(9346),
                            DepartureTime = new DateTime(2024, 4, 16, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9344),
                            Destination = "SFO",
                            Origin = "LHR",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = 4,
                            Airline = "Lufthansa",
                            ArrivalTime = new DateTime(2024, 4, 18, 10, 54, 43, 607, DateTimeKind.Local).AddTicks(9350),
                            DepartureTime = new DateTime(2024, 4, 17, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9348),
                            Destination = "MIA",
                            Origin = "FRA",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 5,
                            Airline = "Singapore Airlines",
                            ArrivalTime = new DateTime(2024, 4, 19, 14, 54, 43, 607, DateTimeKind.Local).AddTicks(9355),
                            DepartureTime = new DateTime(2024, 4, 18, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9353),
                            Destination = "LAX",
                            Origin = "SIN",
                            Price = 900.00m
                        },
                        new
                        {
                            Id = 7,
                            Airline = "AIR CANADA",
                            ArrivalTime = new DateTime(2024, 4, 16, 4, 54, 43, 607, DateTimeKind.Local).AddTicks(9360),
                            DepartureTime = new DateTime(2024, 4, 14, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9358),
                            Destination = "YYZ",
                            Origin = "BOM",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 8,
                            Airline = "Emirates",
                            ArrivalTime = new DateTime(2024, 4, 16, 12, 54, 43, 607, DateTimeKind.Local).AddTicks(9364),
                            DepartureTime = new DateTime(2024, 4, 15, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9362),
                            Destination = "JFK",
                            Origin = "DXB",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 9,
                            Airline = "British Airways",
                            ArrivalTime = new DateTime(2024, 4, 17, 8, 54, 43, 607, DateTimeKind.Local).AddTicks(9369),
                            DepartureTime = new DateTime(2024, 4, 16, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9367),
                            Destination = "SFO",
                            Origin = "LHR",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = 10,
                            Airline = "Lufthansa",
                            ArrivalTime = new DateTime(2024, 4, 18, 10, 54, 43, 607, DateTimeKind.Local).AddTicks(9374),
                            DepartureTime = new DateTime(2024, 4, 17, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9372),
                            Destination = "MIA",
                            Origin = "FRA",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 11,
                            Airline = "Singapore Airlines",
                            ArrivalTime = new DateTime(2024, 4, 19, 14, 54, 43, 607, DateTimeKind.Local).AddTicks(9378),
                            DepartureTime = new DateTime(2024, 4, 18, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9377),
                            Destination = "LAX",
                            Origin = "SIN",
                            Price = 900.00m
                        },
                        new
                        {
                            Id = 12,
                            Airline = "AIR CANADA",
                            ArrivalTime = new DateTime(2024, 4, 16, 4, 54, 43, 607, DateTimeKind.Local).AddTicks(9382),
                            DepartureTime = new DateTime(2024, 4, 14, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9381),
                            Destination = "YYZ",
                            Origin = "BOM",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 13,
                            Airline = "Qatar Airways",
                            ArrivalTime = new DateTime(2024, 4, 20, 10, 54, 43, 607, DateTimeKind.Local).AddTicks(9387),
                            DepartureTime = new DateTime(2024, 4, 19, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9385),
                            Destination = "ORD",
                            Origin = "DOH",
                            Price = 750.00m
                        },
                        new
                        {
                            Id = 14,
                            Airline = "Cathay Pacific",
                            ArrivalTime = new DateTime(2024, 4, 21, 11, 54, 43, 607, DateTimeKind.Local).AddTicks(9392),
                            DepartureTime = new DateTime(2024, 4, 20, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9390),
                            Destination = "LHR",
                            Origin = "HKG",
                            Price = 650.00m
                        },
                        new
                        {
                            Id = 15,
                            Airline = "Delta Air Lines",
                            ArrivalTime = new DateTime(2024, 4, 22, 0, 54, 43, 607, DateTimeKind.Local).AddTicks(9397),
                            DepartureTime = new DateTime(2024, 4, 21, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9395),
                            Destination = "LGA",
                            Origin = "ATL",
                            Price = 400.00m
                        },
                        new
                        {
                            Id = 16,
                            Airline = "Virgin Atlantic",
                            ArrivalTime = new DateTime(2024, 4, 23, 4, 54, 43, 607, DateTimeKind.Local).AddTicks(9402),
                            DepartureTime = new DateTime(2024, 4, 22, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9400),
                            Destination = "JFK",
                            Origin = "LAX",
                            Price = 550.00m
                        },
                        new
                        {
                            Id = 17,
                            Airline = "United Airlines",
                            ArrivalTime = new DateTime(2024, 4, 24, 2, 54, 43, 607, DateTimeKind.Local).AddTicks(9407),
                            DepartureTime = new DateTime(2024, 4, 23, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9405),
                            Destination = "LAX",
                            Origin = "ORD",
                            Price = 450.00m
                        },
                        new
                        {
                            Id = 18,
                            Airline = "KLM Royal Dutch Airlines",
                            ArrivalTime = new DateTime(2024, 4, 25, 6, 54, 43, 607, DateTimeKind.Local).AddTicks(9413),
                            DepartureTime = new DateTime(2024, 4, 24, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9410),
                            Destination = "JFK",
                            Origin = "AMS",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = 19,
                            Airline = "American Airlines",
                            ArrivalTime = new DateTime(2024, 4, 26, 2, 54, 43, 607, DateTimeKind.Local).AddTicks(9417),
                            DepartureTime = new DateTime(2024, 4, 25, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9415),
                            Destination = "SFO",
                            Origin = "DFW",
                            Price = 550.00m
                        },
                        new
                        {
                            Id = 20,
                            Airline = "Air France",
                            ArrivalTime = new DateTime(2024, 4, 27, 7, 54, 43, 607, DateTimeKind.Local).AddTicks(9422),
                            DepartureTime = new DateTime(2024, 4, 26, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9420),
                            Destination = "ATL",
                            Origin = "CDG",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 21,
                            Airline = "Qantas",
                            ArrivalTime = new DateTime(2024, 4, 28, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9426),
                            DepartureTime = new DateTime(2024, 4, 27, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9425),
                            Destination = "LHR",
                            Origin = "SYD",
                            Price = 1000.00m
                        },
                        new
                        {
                            Id = 22,
                            Airline = "Turkish Airlines",
                            ArrivalTime = new DateTime(2024, 4, 29, 9, 54, 43, 607, DateTimeKind.Local).AddTicks(9431),
                            DepartureTime = new DateTime(2024, 4, 28, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9429),
                            Destination = "JFK",
                            Origin = "IST",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 23,
                            Airline = "Japan Airlines",
                            ArrivalTime = new DateTime(2024, 4, 30, 8, 54, 43, 607, DateTimeKind.Local).AddTicks(9435),
                            DepartureTime = new DateTime(2024, 4, 29, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9434),
                            Destination = "LAX",
                            Origin = "NRT",
                            Price = 850.00m
                        },
                        new
                        {
                            Id = 24,
                            Airline = "Alitalia",
                            ArrivalTime = new DateTime(2024, 5, 1, 7, 54, 43, 607, DateTimeKind.Local).AddTicks(9440),
                            DepartureTime = new DateTime(2024, 4, 30, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9438),
                            Destination = "JFK",
                            Origin = "FCO",
                            Price = 750.00m
                        },
                        new
                        {
                            Id = 25,
                            Airline = "Southwest Airlines",
                            ArrivalTime = new DateTime(2024, 5, 1, 23, 54, 43, 607, DateTimeKind.Local).AddTicks(9444),
                            DepartureTime = new DateTime(2024, 5, 1, 22, 54, 43, 607, DateTimeKind.Local).AddTicks(9443),
                            Destination = "LAX",
                            Origin = "LAS",
                            Price = 200.00m
                        });
                });

            modelBuilder.Entity("GBCTravel105.Areas.BookingManagement.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PricePerNight")
                        .HasColumnType("real");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://images.pexels.com/photos/16104977/pexels-photo-16104977/free-photo-of-facade-of-hotel-in-city.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Location = "Surat",
                            Name = "Sobhagya",
                            PricePerNight = 2333.44f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://images.pexels.com/photos/59924/pexels-photo-59924.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Location = "Dubai",
                            Name = "Grand Hyatt",
                            PricePerNight = 350f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://images.pexels.com/photos/1813467/pexels-photo-1813467.jpeg?auto=compress&cs=tinysrgb&w=400",
                            Location = "New York",
                            Name = "The Ritz-Carlton",
                            PricePerNight = 550f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://images.pexels.com/photos/2957461/pexels-photo-2957461.jpeg?auto=compress&cs=tinysrgb&w=400",
                            Location = "Paris",
                            Name = "Mandarin Oriental",
                            PricePerNight = 700f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "",
                            Location = "Mumbai",
                            Name = "Taj Mahal Palace",
                            PricePerNight = 450f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "",
                            Location = "Dubai",
                            Name = "Burj Al Arab",
                            PricePerNight = 1500f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "",
                            Location = "Dubai",
                            Name = "Atlantis The Palm",
                            PricePerNight = 600f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "",
                            Location = "Singapore",
                            Name = "Marina Bay Sands",
                            PricePerNight = 800f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "",
                            Location = "New York",
                            Name = "The Plaza Hotel",
                            PricePerNight = 650f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "",
                            Location = "Berlin",
                            Name = "Hotel Adlon Kempinski",
                            PricePerNight = 400f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "",
                            Location = "London",
                            Name = "The Langham",
                            PricePerNight = 600f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "",
                            Location = "New York",
                            Name = "Waldorf Astoria",
                            PricePerNight = 700f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "",
                            Location = "Paris",
                            Name = "Four Seasons Hotel",
                            PricePerNight = 800f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "",
                            Location = "Hong Kong",
                            Name = "The Peninsula",
                            PricePerNight = 900f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "",
                            Location = "Las Vegas",
                            Name = "Bellagio",
                            PricePerNight = 600f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "",
                            Location = "Singapore",
                            Name = "Raffles Hotel",
                            PricePerNight = 750f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "",
                            Location = "San Diego",
                            Name = "Hotel del Coronado",
                            PricePerNight = 400f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "",
                            Location = "Las Vegas",
                            Name = "MGM Grand",
                            PricePerNight = 550f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "",
                            Location = "Bangkok",
                            Name = "Shangri-La Hotel",
                            PricePerNight = 650f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "",
                            Location = "Los Angeles",
                            Name = "Ritz-Carlton",
                            PricePerNight = 700f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 21,
                            ImageUrl = "",
                            Location = "Sydney",
                            Name = "InterContinental",
                            PricePerNight = 800f,
                            RoomNumber = 0,
                            status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
